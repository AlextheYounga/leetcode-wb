/*
Title: Bitwise AND of Numbers Range
Link: https://leetcode.com/problems/bitwise-and-of-numbers-range
Difficulty: Medium

Description:
Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.

Example 1:
Input: left = 5, right = 7
Output: 4

Example 2:
Input: left = 0, right = 0
Output: 0

Example 3:
Input: left = 1, right = 2147483647
Output: 0

Constraints:
0 <= left <= right <= 231 - 1
*/

struct Solution;

impl Solution {
    pub fn range_bitwise_and(left: i32, right: i32) -> i32 {
		let left = left;
		let mut right = right;
		
		while left < right {
			right = right & (right - 1);  // Remove the lowest set bit of right
		}
	
		return left & right;
    }
}

fn main() {
    let samples: [[i32; 2]; 5]  = [
        [5, 7], // => 4
        [0, 0], // => 0
		[1, 9],
		[5, 9],
		[1, 2147483647], // => 0
    ];

    for sample in samples {
		let left: i32 = sample[0];
		let right: i32 = sample[1];
		println!("Left: {}. Right {}", left, right);
        let output: i32 = Solution::range_bitwise_and(left, right);
        println!("Output: {}", output);
    }
}


/* 
How this works:
Input: 1, 2147483647
Left 1 00000000000000000000000000000001
Right 2147483647 01111111111111111111111111111111

The goal is to find the common prefix. 
This can be done by shifting both left and right to the right until they become equal. 
The number of shifts gives you how many trailing bits should be 0 in the final result.

Let's subtract 1 from the right each loop and run a bitwise AND on the last right.

Loop: 2147483646 01111111111111111111111111111110
Loop: 2147483644 01111111111111111111111111111100
Loop: 2147483640 01111111111111111111111111111000
Loop: 2147483632 01111111111111111111111111110000
Loop: 2147483616 01111111111111111111111111100000
Loop: 2147483584 01111111111111111111111111000000
Loop: 2147483520 01111111111111111111111110000000
Loop: 2147483392 01111111111111111111111100000000
Loop: 2147483136 01111111111111111111111000000000
Loop: 2147482624 01111111111111111111110000000000
Loop: 2147481600 01111111111111111111100000000000
Loop: 2147479552 01111111111111111111000000000000
Loop: 2147475456 01111111111111111110000000000000
Loop: 2147467264 01111111111111111100000000000000
Loop: 2147450880 01111111111111111000000000000000
Loop: 2147418112 01111111111111110000000000000000
Loop: 2147352576 01111111111111100000000000000000
Loop: 2147221504 01111111111111000000000000000000
Loop: 2146959360 01111111111110000000000000000000
Loop: 2146435072 01111111111100000000000000000000
Loop: 2145386496 01111111111000000000000000000000
Loop: 2143289344 01111111110000000000000000000000
Loop: 2139095040 01111111100000000000000000000000
Loop: 2130706432 01111111000000000000000000000000
Loop: 2113929216 01111110000000000000000000000000
Loop: 2080374784 01111100000000000000000000000000
Loop: 2013265920 01111000000000000000000000000000
Loop: 1879048192 01110000000000000000000000000000
Loop: 1610612736 01100000000000000000000000000000
Loop: 1073741824 01000000000000000000000000000000
Loop: 		   0 00000000000000000000000000000000

Left 1 		 	 00000000000000000000000000000001
New Right 0 	 00000000000000000000000000000000

Output: 0
```
*/ 